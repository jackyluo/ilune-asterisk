;main menu configure file
;dialplan_ivr_menu_dynamic.conf
;using tables:
;cfg_ivrmenulist
;cfg_ivrmenu 
;
[app-ivr_menu_dynamic_test_entry]
exten=>start,1,NoOp();

same=>n,Verbose(1,enter ivr_menu_dynamic_test_entry: ${ARG1}); 
same=>n,Set(IVR_ENTRY=${ARG1});  

;=====9399==for=test szca-ivr=====
same=>n,GotoIf($["ACTION_${IVR_ENTRY}" = "ACTION_9399"]?goto_ivr-szca-test);


;override IVR_ID for test
same=>n,Verbose(1,default IVR_ID:${IVR_ID});
same=>n,Set(IVR_ID=${ODBC_FIND_IVRMENU_ID_BY_ENTRY(${IVR_ENTRY})}); 

same=>n,GotoIf($[${ISNULL(${IVR_ID})}]?exit_test);

same=>n,Verbose(1,test IVR_ID:${IVR_ID});
same=>n,GoSub(ivr_menu_dynamic,start,1(${ARG1},${IVR_ID}));

same=>n(exit_test),SayAlpha(EXIT);
same=>n,Playback(${REC_WAV_DIR}/_invalid_ivr_entry)
same=>n,hangup();

same=>n(goto_ivr-szca-test),GoSub(ivr-szca-test,s,1);
;----------------------------------------------------------------------
;----------------------------------------------------------------------

[ivr_menu_dynamic]
exten=>start,1,NoOp()
same=>n,Verbose(1,operate ${UNIQUEID} by configurated in cfg_ivrmenu);
same=>n,Verbose(1,show ARG1(exten):${ARG1},ARG2(ivrId):${ARG2});
same=>n,Set(IVR_ENTRY=${ARG1});  
same=>n,Set(IVR_ID=${ARG2}); 
 
;log IVR enter event, IVR_NODEID = 0 at the first
same=>n,Set(IVR_NODEID=0)
;------same=>n,Set(IVR_INPUT_KEY=) ;set the input_key as null in  insert operation, update it after read input in Read(INPUT_KEY...
same=>n,Set(CLICK_ID=${ODBC_GET_SEQUENCE(sq_log_ivrclick)})
same=>n,Set(ODBC_LOG_IVR_CLICK_EVENT()=${CLICK_ID},${UNIQUEID},${CALLERID(num)},${IVR_ENTRY},${IVR_ID},${IVR_NODEID},${IVR_INPUT_KEY},${CHANNEL(NAME)},${STRFTIME()});


;get CFG_IVRMENU.ACTION: only two action: QUEUE or NODE
;------same=>n,Set(IVR_MENU_ACTION=${ODBC_GET_IVR_MENU_ACTION(${IVR_ID})})


;find first ivr node_id
;------same=>n,Set(IVR_FIRST_NODE_ID=${ODBC_GET_IVR_FIRST_NODE_ID(${IVR_ID})})

;define menu loop var------
;------same=>n,GotoIf($[${ISNULL(${IVR_ID})}]?set_ivr_id:set_ivr_var);
;------same=>n(set_ivr_id),Set(IVR_ID=${ODBC_FIND_IVRMENU_ID_BY_DEFFAULT()});  

;------same=>n(set_ivr_var),NoOp();
;need answer first ,otherwise if skip greeting ,then read wav would occurs error.
same=>n,Answer()

;get IVR MENU greeting wav and read wav----------  
same=>n,Set(ARRAY(IVR_GREETING_WAV,IVR_READ_WAV,IVR_ACTION,IVR_ACTION_ARGS)=${ODBC_FIND_IVRMENU_BY_ID(${IVR_ID})})
same=>n,Verbose(1,IVR_GREETING_WAV:${IVR_GREETING_WAV}, IVR_READ_WAV:${IVR_READ_WAV},IVR_ACTION:${IVR_ACTION},IVR_ACTION_ARGS:${IVR_ACTION_ARGS});


same=>n,GotoIf($[${ISNULL(${IVR_GREETING_WAV})}]?skip_greeting);
; play greeting wav ----
same=>n,Playback(${REC_WAV_DIR}/${IVR_GREETING_WAV})
same=>n(skip_greeting),NoOp()

; goto QUEUE if IVR_ACTION = 'QUEUE'
same=>n,GotoIf($["ACTION_${IVR_ACTION}" = "ACTION_QUEUE"]?goto_ivr_action_4_queue)
; else goto  node  loop

;read input-----
;same=>n,GotoIf($[${ISNULL(${IVR_READ_WAV})}]?skip_read);
;----same=>n,GotoIf($["NULL${IVR_READ_WAV}" = "NULL"]?skip_read)
;----same=>n,Read(INPUT_KEY,${REC_WAV_DIR}/${IVR_READ_WAV},1,s,3,10)
;----same=>n,Verbose(1,read INPUT_KEY:${INPUT_KEY});
;----same=>n(skip_read),NoOp()
;----same=>n,Set(IVR_INPUT_KEY=${INPUT_KEY})

;UPDATE input key after user input

;----same=>n,Set(ODBC_LOG_IVR_CLICK_EVENT_UPDATE_KEY(${CLICK_ID})=${INPUT_KEY});

;----same=>n,GotoIf($[${ISNULL(${IVR_INPUT_KEY})}]?_no_input_key:_enter_node);

;----same=>n(_enter_node),NoOp();
;same=>n,Set(V_NEXT_NODEID=${ODBC_FIND_IVRMENU_NODEID_BY_PID(${IVR_ID},${IVR_PARENTID},${IVR_INPUT_KEY})});
;----same=>n,Set(V_NEXT_NODEID=${ODBC_FIND_IVRMENU_NODEID_BY_PID(${IVR_ID},${IVR_FIRST_NODE_ID},${IVR_INPUT_KEY})});

; invalid input
;----same=>n,GotoIf($[${ISNULL(${V_NEXT_NODEID})}]?_invalid_input_key:_valid_input_key);

;----same=>n(_valid_input_key),GoSub(ivr_menu_dynamic_loop_node,s,1(${V_NEXT_NODEID}));

;----same=>n(_invalid_input_key),NoOp(); 
;----same=>n,Playback(${REC_WAV_DIR}/_invalid_input)
;----same=>n(_no_input_key),NoOp(); 
;----same=>n,Hangup();

;------goto_ivr_action_4_node------
same=>n(goto_ivr_action_4_node),NoOp();888888888888888888888888888888888888
;find first ivr node_id
same=>n,Set(IVR_FIRST_NODE_ID=${ODBC_GET_IVR_FIRST_NODE_ID(${IVR_ID})})
same=>n,GoSub(ivr_menu_dynamic_loop_node,s,1(${IVR_FIRST_NODE_ID}));

;------goto_ivr_action_4_queue------
same=>n(goto_ivr_action_4_queue),NoOp();888888888888888888888888888888888888
same=>n,GoSub(ivr_check_service_duration_setting_before_into_queue,s,1(${IVR_ACTION_ARGS}));



;----------------------------------------------------
;------- START IVR MENU NODE LOOP--------------------
;----------------------------------------------------

;start loop to handle ivr menu
 
[ivr_menu_dynamic_loop_node]
exten=>s,1,NoOp();
same=>n,Set(IVR_NODEID=${ARG1})
same=>n,Verbose(1,Loop node ${UNIQUEID}, IVR_ID:${IVR_ID},IVR_NODEID:${IVR_NODEID});
;find node info  
;same=>n,Set(ARRAY(V_NODEID,V_PARENTID,V_INPUT_KEY,V_ACTION,V_ACTION_ARGS,V_PLAY_WAV,V_WAITING_WAV_FILE,V_READ_WAV,V_READ_MAXDIGITS,V_READ_OPTIONS,V_READ_ATTEMPT_TIMES,V_READ_TIMEOUT)=${ODBC_FIND_IVRMENU_NODE_BY_ID(${IVR_NODEID})})
same=>n,Set(ARRAY(V_NODEID,V_PARENTID,V_INPUT_KEY,V_ACTION,V_ACTION_ARGS,V_PLAY_WAV,V_WAITING_WAV_FILE,V_READ_WAV,V_READ_MAXDIGITS,V_READ_OPTIONS,V_READ_ATTEMPT_TIMES,V_READ_TIMEOUT,V_NODE_REMARK,V_DEFAULT_INPUT_KEY)=${ODBC_FIND_IVRMENU_NODE_BY_ID(${IVR_NODEID})})

; invalid input
same=>n,GotoIf($[${ISNULL(${V_NODEID})}]?_exit);

;do IVR log first:
same=>n,Set(IVR_INPUT_KEY=);  set the input_key as null at insert, update it after read input in Read(INPUT_KEY...
same=>n,Set(CLICK_ID=${ODBC_GET_SEQUENCE(sq_log_ivrclick)})
same=>n,Set(ODBC_LOG_IVR_CLICK_EVENT()=${CLICK_ID},${UNIQUEID},${CALLERID(num)},${IVR_ENTRY},${IVR_ID},${IVR_NODEID},${IVR_INPUT_KEY},${CHANNEL(NAME)},${STRFTIME()});
 

;play play_wav----------  
same=>n,Verbose(1,V_PLAY_WAV:${V_PLAY_WAV});
same=>n,GotoIf($[${ISNULL(${V_PLAY_WAV})}]?_skip_paly_wav);
same=>n,Playback(${REC_WAV_DIR}/${V_PLAY_WAV})
same=>n(_skip_paly_wav),NoOp()

;same=>n,Verbose(1, TOLOWER: ${TOLOWER(${V_ACTION})},ACTION:${V_ACTION});
;switch by action ---
 
 

same=>n,GotoIf($["${TOLOWER(${V_ACTION})}" = "next"]?enter_next) 
same=>n,GotoIf($["${TOLOWER(${V_ACTION})}" = "queue"]?enter_queue) 
same=>n,GotoIf($["${TOLOWER(${V_ACTION})}" = "hangup"]?enter_hangup) 

same=>n,GotoIf($["${TOLOWER(${V_ACTION})}" = "goto_parent"]?goto_parent)
same=>n,GotoIf($["${TOLOWER(${V_ACTION})}" = "goto_node"]?enter_goto_node)
same=>n,GotoIf($["${TOLOWER(${V_ACTION})}" = "goto_ivr"]?enter_goto_ivr)
;send sms 发送短信
same=>n,GotoIf($["${TOLOWER(${V_ACTION})}" = "send_sms"]?enter_send_sms)
;same=>n,GotoIf($["${TOLOWER(${V_ACTION})}" = "repeat"]?enter_repeat)



;Action: next start----------------

same=>n(enter_next),NoOp();

;read input and play read_wav---------- 
same=>n,Verbose(1,V_READ_WAV:${V_READ_WAV});
same=>n,GotoIf($[${ISNULL(${V_READ_WAV})}]?_skip_read_wav);
;same=>n,Read(INPUT_KEY,${REC_WAV_DIR}/${V_READ_WAV},${V_READ_MAXDIGITS},${V_READ_OPTIONS},${V_READ_ATTEMPT_TIMES},${V_READ_TIMEOUT});
same=>n,Read(INPUT_KEY,${REC_WAV_DIR}/${V_READ_WAV},${V_READ_MAXDIGITS},${V_READ_OPTIONS},3,5);

;READSTATUS  ,V_NODE_REMARK,V_DEFAULT_INPUT_KEY
same=>n,Verbose(1,READSTATUS ${UNIQUEID} for NODEID[${V_NODEID}-${V_NODE_REMARK}]:${READSTATUS});
same=>n,GotoIf($[${ISNULL(${READSTATUS})}]?_skip_read_wav);
;OK
same=>n,GotoIf($["${READSTATUS}" = "OK"]?input_other_key) ;
;use default_key for timeout
;TIMEOUT,ERROR,HANGUP,INTERRUPTED,SKIPPED,TIMEOUT
same=>n,GotoIf($["${READSTATUS}" = "TIMEOUT"]?input_key_timeout:input_other_key) ;
same=>n(input_key_timeout),Set(INPUT_KEY=${V_DEFAULT_INPUT_KEY});


;==start of pound key===test in softphone, Asterisk received "" instead of "#"(pound key)
;but when the input timeout event raised, the same result as pound key 
;same=>n,GotoIf($["POUND_KEY${INPUT_KEY}" = "POUND_KEY"]?input_pound_key:input_other_key) ;
;same=>n(input_pound_key),Verbose(1,user enter the NULL or pound key:|${INPUT_KEY}|);
;same=>n,Set(INPUT_KEY=#);
;same=>n,Verbose(1,user enter the NULL or pound key was set to:|${INPUT_KEY}|);
;==end of pound key===test in softphone, Asterisk received "" instead of "#"(pound key)

same=>n(input_other_key),Verbose(1,the key was:|${INPUT_KEY}|);
same=>n,Verbose(1,V_NODEID:${V_NODEID}, INPUT_KEY:${INPUT_KEY});
;UPDATE input key after user input
same=>n,Set(ODBC_LOG_IVR_CLICK_EVENT_UPDATE_KEY(${CLICK_ID})=${INPUT_KEY});
;====http://localhost:8080/curl/clickedPath.html?pbxUid=1503941410.589&nodeId=2
;same=>n,Set(CLICKED_PATH=${CURL(${HTTP_API_BASE}/clickedPath.html?pbxUid=${UNIQUEID}&nodeId=${INPUT_KEY})})
same=>n,Set(CLICKED_PATH=${CURL(${HTTP_API_BASE}/clickedPath.html?pbxUid=${UNIQUEID}&callerNo=${CALLERID(num)}&ivrEntry=${IVR_ENTRY}&ivrId=${IVR_ID}&nodeId=${V_NODEID}&inputKey=${INPUT_KEY}&channel=${CHANNEL(NAME)})})
 
;exit when timeout and no input
same=>n,GotoIf($[${ISNULL(${INPUT_KEY})}]?_exit);

;do action: next-----------------
same=>n,Set(V_NEXT_NODEID=${ODBC_FIND_IVRMENU_NODEID_BY_PID(${IVR_ID},${V_NODEID},${INPUT_KEY})});
same=>n,GotoIf($[${ISNULL(${V_NEXT_NODEID})} & ${ISNULL(${V_NEXT_NODEID})}]?_goto_repeat:_goto_next);
same=>n(_goto_next),GoSub(ivr_menu_dynamic_loop_node,s,1(${V_NEXT_NODEID}));
same=>n(_goto_repeat),GoSub(ivr_menu_dynamic_loop_node,s,1(${IVR_NODEID}));

;no read wav, exit.
same=>n(_skip_read_wav),Playback(${REC_WAV_DIR}/_ivr_config_error)
same=>n,Verbose(1,no read wav , hangup , uid: ${UNIQUEID});
same=>n,GoSub(ivr_menu_dynamic_loop_node,do_ivr_menu_hangup_action,1);
;same=>n,Goto(_exit);

;Action: next end OK----------------


;Action: queue start----------------
same=>n(enter_queue),NoOp();
same=>n,GoSub(ivr_check_service_duration_setting_before_into_queue,s,1(${V_ACTION_ARGS}));
;Action: queue END OK---------------

;Action: hangup start----------------
same=>n(enter_hangup),Verbose(1, do_ivr_menu_hangup_action uid: ${UNIQUEID});
same=>n,GoSub(ivr_menu_dynamic_loop_node,do_ivr_menu_hangup_action,1);
;Action: hangup END OK----------------

;Action: goto node ----------------
same=>n(enter_goto_node),NoOp();
same=>n,GoSub(ivr_menu_dynamic_goto_node,s,1(${V_ACTION_ARGS}));

;Action: goto node END OK---------------
;

;Action: goto ivr ----------------
same=>n(enter_goto_ivr),NoOp();
same=>n,GoSub(ivr_menu_dynamic_goto_ivr,s,1(${IVR_NODEID},${V_ACTION_ARGS}));

;Action: goto ivr END----------------


;Action: SEND_SMS  ----------------
same=>n(enter_send_sms),NoOp();
same=>n,verbose(1,Read SMS target phone number);
same=>n,Read(SMS_TARGET_PHONE_NUMBER,${REC_WAV_DIR}/_READ_SMS_TARGET_PHONE_NUMBER,11,n,3,5);

same=>n,GotoIf($["${SMS_TARGET_PHONE_NUMBER}_NULL" = "_NULL"]?_goto_caller:_goto_input_number) ;
same=>n(_goto_caller),Set(SMS_TARGET_PHONE_NUMBER=${CALLERID(num)});
;same=>n(_goto_input_number),verbose(1,send SMS to: ${SMS_TARGET_PHONE_NUMBER});
 
same=>n(_goto_input_number),Verbose(1,SEND_SMS:uniqueId=${UNIQUEID},nodeId=${IVR_NODEID},caller=${CALLERID(num)},SMS target phone number:${SMS_TARGET_PHONE_NUMBER});
;same=>n,Set(SMS_RESULT=${CURL(${HTTP_API_BASE}/sendSmsByUniqueId.html?uniqueId=${UNIQUEID}&nodeId=${IVR_NODEID}&caller=${CALLERID(num)})})
same=>n,Set(SMS_RESULT=${CURL(${HTTP_API_BASE}/sendSmsByUniqueId.html?uniqueId=${UNIQUEID}&nodeId=${IVR_NODEID}&caller=${CALLERID(num)})&target=${SMS_TARGET_PHONE_NUMBER})})
same=>n,hangup(100);
;Action:SEND_SMS END----------------


; ----------- ABOVE OK
same=>n(_exit),Verbose(1,hangup uid: ${UNIQUEID});
same=>n,hangup(100);


;--------HANGUP_ACTION----------
exten=>do_ivr_menu_hangup_action,1,NoOp();
;same=>n,Verbose(1, do_ivr_menu_hangup_action uid: ${UNIQUEID});
same=>n,hangup(100);
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;
;-----------------do goto_node  - enter the node  -----------------
;
[ivr_menu_dynamic_goto_node]
exten=>s,1,NoOp();
same=>n,Set(NODE_ID=${ARG1});   
same=>n,GoSub(ivr_menu_dynamic_loop_node,s,1(${NODE_ID}))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;-----------------do goto_ivr  - enter the ivr  -----------------
; 
[ivr_menu_dynamic_goto_ivr]
exten=>s,1,NoOp();
same=>n,Set(ENTRY=NODE:${ARG1});   
same=>n,Set(IVR_ID=${ARG2});   
same=>n,GoSub(ivr_menu_dynamic,start,1(${ENTRY},${IVR_ID}))

;--------------------------------------------------------
[ivr_check_service_duration_setting_before_into_queue]
;----------判断是否是服务时间段------------
exten=>s,1,NoOp();
same=>n,Set(QUEUE_NANE=${ARG1}); 
;check service type
same=>n,Set(ARRAY(SERVICE_TYPE,SERVICE_TARGET)=${CURL(${HTTP_API_BASE}/getServiceConfig.html)})  
same=>n,Set(ChannelNum=${CHANNEL(CHANNELTYPE)}-${CHANNEL(dahdi_channel)})
same=>n,Verbose(1,ivr_check_service_duration_setting_before_into_queue,QUEUE_NANE=${QUEUE_NANE},SERVICE_TYPE=${SERVICE_TYPE},SERVICE_TARGET=${SERVICE_TARGET},ChannelNum=${ChannelNum},&caller=${CALLERID(num)})

same=>n,Set(DS_PHONE_NUM=${SERVICE_TARGET}) 

;check duty sheet: OUT - out of service ;NORMAL - normal;TRANS_TO - transfer to ...
same=>n,GotoIf($["ST_${SERVICE_TYPE}" = "ST_"]?goto_into_queue)
same=>n,GotoIf($["ST_${SERVICE_TYPE}" = "ST_IN_OF_SERVICE"]?goto_into_queue)
same=>n,GotoIf($["ST_${SERVICE_TYPE}" = "ST_OUT_OF_SERVICE"]?goto_out_of_service_duration)
same=>n,GotoIf($["ST_${SERVICE_TYPE}" = "ST_TRANSFER_TO"]?goto_transfer_to_phone)

same=>n(goto_out_of_service_duration),Goto(from-pstn,out_of_service_duration_before_queue,1(${DS_PHONE_NUM}));
same=>n(goto_transfer_to_phone),Goto(from-pstn,transfer_to_phone_before_queue,1(${DS_PHONE_NUM}));
same=>n(goto_into_queue),Verbose(1,goto_into_queue ${QUEUE_NANE});
same=>n,Playback(${REC_WAV_DIR}/_tip_to_be_recorded)
same=>n,GoSub(ivr_menu_dynamic_enter_queue,s,1(${QUEUE_NANE}));

;same=>n(label_hangup),NoOp();
;same=>n,Verbose(1,Refused call.....);
;same=>n,hangup();


;
;-----------------do enter_queue - enter the queue  -----------------
;
[ivr_menu_dynamic_enter_queue]
exten=>s,1,NoOp();
same=>n,Set(QUEUE_NANE=${ARG1}); 
same=>n,Set(LOOP_COUNT=${ARG2});
same=>n,Verbose(1,ivr_menu_dynamic ${UNIQUEID} enter_queue1 ,QUEUE_NANE ${QUEUE_NANE},LOOP_COUNT:${LOOP_COUNT});


same=>n,GotoIf($[${ISNULL(${ARG2})}]?_set_loop_count_0:_set_loop_count_ok); 
same=>n(_set_loop_count_0),Set(LOOP_COUNT=0);
same=>n,GotoIf($["1" = "1"]?_set_loop_count_show);
same=>n(_set_loop_count_ok),Set(LOOP_COUNT=${ARG2});
same=>n(_set_loop_count_show),Verbose(1,ivr_menu_dynamic ${UNIQUEID} enter_queue2 ,QUEUE_NANE ${QUEUE_NANE},LOOP_COUNT:${LOOP_COUNT});
   
same=>n,GotoIf($[${ISNULL(${QUEUE_NANE})}]?_exit); 

;redirect call into queue with c option(continue the follow dialplan of the queue after the call was hangug by callee)

;same=>n,Verbose(1,ivr_menu_dynamic 1 QUEUESTATUS:${QUEUESTATUS});

;same=>n,Playback(${REC_WAV_DIR}/_queue_entering_xxxxxxxxxxxxxxxxxxxx)
;c — continue in the dialplan if the callee hangs up (Asterisk 1.6.0 and above).
;r — ring instead of playing MOH.
;t — allow the called user to transfer the calling user.
;same=>n,Queue(${QUEUE_NANE},c,null,0,30,,queue_member_play_beep,,,);
;same=>n,Queue(${QUEUE_NANE},crt,null,0,300,,queue_member_play_beep,,,);
;20190408 ,remove the option  r ,for applicating MOH, and set timeout to 600Seconds 
;same=>n,Queue(${QUEUE_NANE},crt,null,0,300);
;same=>n,Queue(${QUEUE_NANE},ct,null,0,600);
;====设置timeout为30秒
same=>n(enter_queue_now),Queue(${QUEUE_NANE},ct,null,0,300);
 
;QUEUESTATUS - The status of the call as a text string. 
;TIMEOUT 
;FULL 
;JOINEMPTY 
;LEAVEEMPTY 
;JOINUNAVAIL 
;LEAVEUNAVAIL 
;CONTINUE
same=>n,Verbose(1,ivr_menu_dynamic  QUEUESTATUS:${QUEUESTATUS});
;log the queue result into db
same=>n,Set(Q_STATUS_RECORD_ID=${CURL(${HTTP_API_BASE}/queueResultStatus.html?pbxUid=${UNIQUEID}&queueName=${QUEUE_NANE}&queueStatus=${QUEUESTATUS}&loopCount=${LOOP_COUNT})})


same=>n,GotoIf($["${QUEUESTATUS}" = "TIMEOUT"]?goto_queue_timeout)
same=>n,GotoIf($["${QUEUESTATUS}" = "FULL"]?goto_queue_full)
same=>n,GotoIf($["${QUEUESTATUS}" = "JOINEMPTY"]?goto_queue_joinempty)
same=>n,GotoIf($["${QUEUESTATUS}" = "LEAVEEMPTY"]?goto_queue_leaveempty)
same=>n,GotoIf($["${QUEUESTATUS}" = "JOINUNAVAIL"]?goto_queue_joinunavail)
same=>n,GotoIf($["${QUEUESTATUS}" = "LEAVEUNAVAIL"]?goto_queue_leaveunavail)
same=>n,GotoIf($["${QUEUESTATUS}" = "CONTINUE"]?goto_queue_continue)


same=>n(goto_queue_timeout),GoSub(ivr_menu_dynamic_enter_queue,queue_timeout,1(${QUEUE_NANE},${LOOP_COUNT},${Q_STATUS_RECORD_ID}));

same=>n(goto_queue_full),GoSub(ivr_menu_dynamic_enter_queue,queue_full,1);
same=>n(goto_queue_joinempty),GoSub(ivr_menu_dynamic_enter_queue,queue_joinempty,1);
same=>n(goto_queue_leaveempty),GoSub(ivr_menu_dynamic_enter_queue,queue_leaveempty,1);
same=>n(goto_queue_joinunavail),GoSub(ivr_menu_dynamic_enter_queue,queue_joinunavail,1);
same=>n(goto_queue_leaveunavail),GoSub(ivr_menu_dynamic_enter_queue,queue_leaveunavail,1);
;same=>n(goto_queue_continue),GoSub(ivr_menu_dynamic_enter_queue,queue_continue,1);

;get the c option wrapup_ivrid
same=>n(goto_queue_continue),Set(DO_WRAPUP_IVRID=${ODBC_FIND_QUEUE_WRAPUP_IVRID(${QUEUE_NANE})});
same=>n,GotoIf($[${ISNULL(${DO_WRAPUP_IVRID})}]?_exit); 
same=>n,GotoIf($["${DO_WRAPUP_IVRID}" = "0"]?_exit); 

same=>n(do_wrapup),Verbose(1,DO WRAPUP IVR by goto subrouting ivr_menu_dynamic,DO_WRAPUP_IVRID:${DO_WRAPUP_IVRID})

same=>n,GoSub(ivr_menu_dynamic,start,1(${QUEUE_NANE},${DO_WRAPUP_IVRID}));

same=>n(_exit),Hangup;

;TIMEOUT 
;FULL 
;JOINEMPTY 
;LEAVEEMPTY 
;JOINUNAVAIL 
;LEAVEUNAVAIL 
;CONTINUE
;--------TIMEOUT----------
exten=>queue_timeout,1,NoOp();
same=>n,Playback(${REC_WAV_DIR}/_queue_status_timeout)
same=>n(_exit),Hangup; 

;--------TIMEOUT------====START=========----
exten=>queue_timeout_new,1,NoOp();
same=>n,Set(QUEUE_NANE=${ARG1}); 
same=>n,Set(LOOP_COUNT=${ARG2});
same=>n,Set(Q_STATUS_RECORD_ID=${ARG3});
same=>n,Verbose(1,caller loop in queue: QUEUE_NANE: ${QUEUE_NANE} - LOOP_COUNT:${LOOP_COUNT});
same=>n,Read(INPUT_KEY,${REC_WAV_DIR}/_queue_status_timeout_choice,1,3,5);
same=>n,Verbose(1,caller enter INPUT_KEY:${INPUT_KEY});
same=>n,Set(CLICKED_PATH=${CURL(${HTTP_API_BASE}/queueResultStatusChooseKey.html?pbxUid=${UNIQUEID}&queueStatusId=${Q_STATUS_RECORD_ID}&chooseKey=${INPUT_KEY})})
same=>n,GotoIf($["${INPUT_KEY}" = "0"]?_callback_exit)
same=>n,GotoIf($["${INPUT_KEY}" = "1"]?_loop_in_queue_again)

;same=>n,Goto(ivr_menu_dynamic_enter_queue,queue_timeout,_force_exit)
;not in 0,1, force exit.
same=>n,GotoIf($["1" = "1"]?_force_exit)

same=>n(_loop_in_queue_again),Set(LOOP_COUNT=$[${LOOP_COUNT}+1]);
same=>n,Verbose(1,LOOP_COUNT:${LOOP_COUNT});
same=>n,GotoIf($["${LOOP_COUNT}" > "3"]?_force_exit)

 
same=>n,GoSub(ivr_menu_dynamic_enter_queue,s,1(${QUEUE_NANE},${LOOP_COUNT}));


same=>n(_callback_exit),Verbose(1,DO log for callback...)
same=>n,Hangup; 

same=>n(_force_exit),Playback(${REC_WAV_DIR}/_queue_status_timeout_force_exit)
same=>n(_exit),Hangup; 

;--------TIMEOUT------====END=========----

;--------FULL----------
exten=>queue_full,1,NoOp();
same=>n,Playback(${REC_WAV_DIR}/_queue_status_full)
same=>n(_exit),Hangup; 

;--------JOINEMPTY----------
exten=>queue_joinempty,1,NoOp();
same=>n,Playback(${REC_WAV_DIR}/_queue_status_joinempty)
same=>n(_exit),Hangup;

;--------LEAVEEMPTY----------
exten=>queue_leaveempty,1,NoOp();
same=>n,Playback(${REC_WAV_DIR}/_queue_status_leaveempty)
same=>n(_exit),Hangup;

;--------JOINUNAVAIL----------
exten=>queue_joinunavail,1,NoOp();
same=>n,Playback(${REC_WAV_DIR}/_queue_status_joinunavail)
same=>n(_exit),Hangup;

;--------LEAVEUNAVAIL----------
exten=>queue_leaveunavail,1,NoOp();
same=>n,Playback(${REC_WAV_DIR}/_queue_status_leaveunavail)
same=>n(_exit),Hangup;

;--------CONTINUE----------
exten=>queue_continue,1,NoOp();
same=>n,Playback(${REC_WAV_DIR}/_queue_status_continue)
same=>n(_exit),Hangup;   

[macro-queue_member_play_beep]
;Play beep for alarm 
exten=>s,1,NoOp()
same=>n,Playback(${REC_WAV_DIR}/_beep)

[ivr-szca-test]
;==9399==
exten=>s,1,NoOp();
same=>n,Verbose(1,Start SZCA-IVR);
same=>n,Set(IVR_REC_WAV_DIR=/var/lib/asterisk/wav_sounds/ivr_recording);
same=>n,Playback(${IVR_REC_WAV_DIR}/17070500)

same=>n(loop-read),Read(INPUT_KEY,${IVR_REC_WAV_DIR}/17062703);
same=>n,Verbose(1,read INPUT_KEY:|${INPUT_KEY}|);
;same=>n,GotoIf($["KEY_${INPUT_KEY}" = "KEY_0"]?loop-read) ;
same=>n,GotoIf($["KEY_0" = "KEY_0"]?loop-read) ;
